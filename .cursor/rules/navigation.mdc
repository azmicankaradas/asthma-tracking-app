---
globs: app/**/*.tsx
---

# Navigation Guidelines with Expo Router

## File-Based Routing

- Use Expo Router's file-based routing system
- Follow the directory structure conventions:
  - `app/_layout.tsx` for root layout
  - `app/(tabs)/_layout.tsx` for tab layouts
  - `app/[param].tsx` for dynamic routes
  - `app/modal.tsx` for modals
  - `app/+not-found.tsx` for 404 pages

```typescript
// app/_layout.tsx
import { Stack } from "expo-router";

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
      <Stack.Screen name="modal" options={{ presentation: "modal" }} />
    </Stack>
  );
}
```

## Navigation Patterns

- Use Link component for navigation
- Handle dynamic routes with params
- Implement proper navigation guards

```typescript
import { Link, useRouter } from "expo-router";

function NavigationExample() {
  const router = useRouter();

  return (
    <View>
      <Link href="/profile/123">Go to Profile</Link>
      <Button
        onPress={() =>
          router.push({
            pathname: "/profile/[id]",
            params: { id: "123" },
          })
        }
      />
    </View>
  );
}
```

## Route Groups

- Use route groups for shared layouts
- Implement proper tab navigation
- Handle modals and authentication flows

```typescript
// app/(tabs)/_layout.tsx
import { Tabs } from "expo-router";

export default function TabsLayout() {
  return (
    <Tabs>
      <Tabs.Screen
        name="index"
        options={{
          title: "Home",
          tabBarIcon: ({ color }) => <TabBarIcon name="home" color={color} />,
        }}
      />
    </Tabs>
  );
}
```

## Route Parameters

- Use dynamic segments with proper typing
- Handle query parameters
- Implement proper parameter validation

```typescript
// app/profile/[id].tsx
import { useLocalSearchParams, useGlobalSearchParams } from "expo-router";

export default function ProfileScreen() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const { query } = useGlobalSearchParams<{ query: string }>();

  return (
    <View>
      <Text>Profile {id}</Text>
      <Text>Search: {query}</Text>
    </View>
  );
}
```

## Deep Linking

- Configure universal links
- Handle deep link parameters
- Implement proper URL schemes

```typescript
// app.json
{
  "expo": {
    "scheme": "myapp",
    "ios": {
      "associatedDomains": ["applinks:example.com"]
    },
    "android": {
      "intentFilters": [
        {
          "action": "VIEW",
          "data": {
            "scheme": "https",
            "host": "example.com",
            "pathPrefix": "/"
          },
          "category": ["BROWSABLE", "DEFAULT"]
        }
      ]
    }
  }
}
```

## Error Handling

- Implement proper error boundaries
- Handle 404 routes
- Show loading states

```typescript
// app/+not-found.tsx
import { Link } from "expo-router";

export default function NotFound() {
  return (
    <View>
      <Text>Page Not Found</Text>
      <Link href="/">Go Home</Link>
    </View>
  );
}
```

## Type Safety

- Use proper route typing
- Define route parameters
- Implement type-safe navigation

```typescript
declare global {
  namespace ReactNavigation {
    interface RootParamList extends Record<string, object | undefined> {
      "(tabs)": undefined;
      "profile/[id]": { id: string };
      modal: undefined;
    }
  }
}
```
